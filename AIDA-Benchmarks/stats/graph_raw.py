import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
#scrape_seconds = [0.13098454475402832, 1.1364812850952148, 2.128753900527954, 3.1404449939727783, 4.131246566772461, 5.1182026863098145, 6.123453617095947, 7.118639945983887, 8.126396179199219, 9.138053178787231, 10.124947786331177, 11.135791063308716, 12.134190797805786, 13.130415201187134, 14.13770866394043, 15.126887798309326, 16.124885082244873, 17.129152297973633, 18.123757123947144, 19.129586458206177, 20.127846240997314, 21.13320231437683, 22.120229244232178, 23.124876499176025, 24.13527798652649, 25.134194135665894, 26.118731260299683, 27.13474702835083, 28.119398832321167, 29.132787942886353, 30.1378653049469, 31.122554779052734, 32.118072748184204, 33.121543884277344, 34.125733613967896, 35.125791788101196, 36.12049460411072, 37.12841510772705, 38.12666583061218, 39.12905955314636, 40.12273168563843, 41.11991333961487, 42.1183602809906, 43.12822365760803, 44.13345527648926, 45.11677002906799, 46.11973476409912, 47.12929153442383, 48.1251015663147, 49.1325466632843, 50.129767656326294, 51.132715463638306, 52.13331484794617, 53.12977719306946, 54.12176489830017, 55.13231921195984, 56.12076377868652, 57.133623361587524, 58.1314799785614, 59.132667541503906, 60.12923455238342, 61.12105846405029, 62.12732553482056, 63.13051509857178, 64.13302993774414, 65.12658429145813, 66.12317180633545, 67.12797927856445, 68.1307315826416, 69.1227080821991, 70.1227924823761, 71.13256549835205, 72.13106751441956, 73.1333532333374, 74.13042330741882, 75.13443541526794, 76.12741756439209, 77.11753273010254, 78.11964535713196, 79.13573837280273, 80.123211145401, 81.12486004829407, 82.12412714958191, 83.12992024421692, 84.11838293075562, 85.13307642936707, 86.12452363967896, 87.12817978858948, 88.12099361419678, 89.13664484024048, 90.13013291358948, 91.12295794487, 92.11749029159546, 93.12069320678711, 94.12143349647522, 95.11681532859802, 96.12244915962219, 97.12481594085693, 98.12447381019592, 99.12247610092163, 100.12085127830505, 101.12169432640076, 102.1398458480835, 103.119619846344, 104.1330578327179, 105.12986850738525, 106.12930631637573, 107.11852884292603, 108.12680411338806, 109.13633060455322, 110.13132524490356, 111.13196086883545, 112.12022018432617, 113.12888431549072, 114.12131929397583, 115.11956071853638, 116.12482595443726, 117.12882661819458, 118.1200864315033, 119.12114024162292, 120.13130855560303, 121.11951303482056, 122.12946319580078, 123.12115955352783, 124.11799597740173, 125.12249302864075, 126.12121224403381, 127.12726759910583, 128.13830041885376, 129.12070322036743, 130.128915309906, 131.1266794204712, 132.12758564949036, 133.1337695121765, 134.12153148651123, 135.12357831001282, 136.11922240257263, 137.12648940086365, 138.12783312797546, 139.1225929260254, 140.12361073493958, 141.1363091468811, 142.13075232505798, 143.12547898292542, 144.1192226409912, 145.1313877105713, 146.12544512748718, 147.13565135002136, 148.11818885803223, 149.13267517089844, 150.12228536605835, 151.12828397750854, 152.12059783935547, 153.11860990524292, 154.12847876548767, 155.12620615959167, 156.12588119506836, 157.12169241905212, 158.1273283958435, 159.13650226593018, 160.1323709487915, 161.12332463264465, 162.12436366081238, 163.1349368095398, 164.12869787216187, 165.12024116516113, 166.1348295211792, 167.1336224079132, 168.13368797302246, 169.12293457984924, 170.12979769706726, 171.1248893737793, 172.1310338973999, 173.1339316368103, 174.1253228187561, 175.1203818321228, 176.11607575416565, 177.13051176071167, 178.11718463897705, 179.12534880638123, 180.12280011177063, 181.12431263923645, 182.12207794189453, 183.1379907131195, 184.12189269065857, 185.12804555892944, 186.12661480903625, 187.13609194755554, 188.1254415512085, 189.12629914283752, 190.128493309021, 191.12713813781738, 192.12475323677063, 193.12383651733398, 194.1197018623352, 195.1326162815094, 196.1200647354126, 197.13364839553833, 198.12027430534363, 199.1206820011139, 200.13949465751648, 201.1348431110382, 202.11748337745667, 203.13143706321716, 204.1325216293335, 205.11897468566895, 206.13412284851074, 207.11631560325623, 208.1226851940155, 209.12181949615479, 210.12594532966614, 211.1260211467743, 212.11945915222168, 213.13459634780884, 214.12435817718506, 215.12373042106628, 216.12353825569153, 217.12167930603027, 218.12589716911316, 219.12974286079407, 220.1313819885254, 221.12668752670288, 222.1240222454071, 223.13488793373108, 224.12308359146118, 225.11789965629578, 226.1202211380005, 227.12069845199585, 228.12627601623535, 229.12773156166077, 230.12655687332153, 231.12825274467468, 232.13346767425537, 233.11757636070251, 234.12030506134033, 235.12752985954285, 236.12520384788513, 237.13134026527405, 238.11698698997498, 239.12063837051392, 240.12818431854248, 241.11788868904114, 242.12819266319275, 243.12873888015747, 244.13188433647156, 245.13212966918945, 246.1262321472168, 247.1275143623352, 248.1305000782013, 249.12127828598022, 250.1267282962799, 251.13723587989807, 252.13059997558594, 253.12006998062134, 254.13831233978271, 255.1220841407776, 256.123788356781, 257.13295459747314, 258.1186833381653, 259.1287567615509, 260.1188688278198, 261.1259939670563, 262.1291136741638, 263.13272738456726, 264.12065982818604, 265.12740111351013, 266.12255477905273, 267.1206820011139, 268.1177842617035, 269.1259605884552, 270.1375286579132, 271.1352107524872, 272.12994050979614, 273.12642765045166, 274.1260244846344, 275.1211175918579, 276.121789932251, 277.124671459198, 278.1241190433502, 279.12228989601135, 280.1164915561676, 281.11820816993713, 282.11921215057373, 283.13816928863525, 284.13127613067627, 285.12039017677307, 286.1319725513458, 287.1295440196991, 288.1297724246979, 289.13329339027405, 290.13031363487244, 291.1234338283539, 292.12885451316833, 293.12777733802795, 294.1313371658325, 295.13145112991333, 296.1343004703522, 297.11901926994324, 298.1309611797333, 299.12405610084534, 300.1320695877075, 301.1356084346771]
#eval_seconds = [1.096174955368042, 2.0810301303863525, 3.0761382579803467, 4.093843460083008, 5.080657243728638, 6.085731029510498, 7.078793287277222, 8.089978456497192, 9.09605073928833, 10.089095830917358, 11.077372550964355, 12.090532779693604, 13.092733383178711, 14.075370073318481, 15.084552526473999, 16.083253860473633, 17.092839002609253, 18.083987712860107, 19.089245319366455, 20.0879545211792, 21.07681894302368, 22.084984064102173, 23.08738923072815, 24.076411485671997, 25.079938411712646, 26.080450296401978, 27.09564447402954, 28.082072973251343, 29.09609866142273, 30.078832626342773, 31.082170724868774, 32.07670998573303, 33.083208322525024, 34.09003663063049, 35.08223366737366, 36.077417850494385, 37.09268283843994, 38.08853340148926, 39.08728837966919, 40.087674379348755, 41.08401870727539, 42.08136463165283, 43.07473802566528, 44.09275531768799, 45.081231117248535, 46.08468151092529, 47.093376874923706, 48.08671283721924, 49.090179204940796, 50.09161615371704, 51.07528114318848, 52.07999300956726, 53.073283672332764, 54.07714772224426, 55.08893299102783, 56.08509659767151, 57.075838565826416, 58.078388690948486, 59.079641819000244, 60.08959984779358, 61.079999685287476, 62.07484674453735, 63.0899384021759, 64.07660150527954, 65.0898232460022, 66.08832502365112, 67.07527089118958, 68.07299828529358, 69.0881278514862, 70.08956575393677, 71.07456612586975, 72.07647180557251, 73.0758969783783, 74.07549166679382, 75.07964205741882, 76.08952498435974, 77.08213996887207, 78.08378171920776, 79.09592175483704, 80.08571290969849, 81.08494448661804, 82.08475804328918, 83.0899589061737, 84.08303689956665, 85.07980728149414, 86.08637189865112, 87.07238125801086, 88.0791003704071, 89.07967948913574, 90.07754468917847, 91.0834972858429, 92.08190250396729, 93.0854172706604, 94.08469939231873, 95.07993412017822, 96.08502912521362, 97.08840417861938, 98.08425998687744, 99.08242344856262, 100.08056020736694, 101.0814471244812, 102.0791323184967, 103.07983136177063, 104.07867693901062, 105.08898735046387, 106.07747507095337, 107.08103251457214, 108.07460331916809, 109.09330105781555, 110.08989214897156, 111.0891044139862, 112.08153462409973, 113.07581520080566, 114.08258008956909, 115.08250427246094, 116.0852541923523, 117.07368803024292, 118.0797016620636, 119.07892727851868, 120.09032797813416, 121.08308529853821, 122.07604455947876, 123.08734893798828, 124.08101201057434, 125.0824658870697, 126.08410596847534, 127.0910017490387, 128.07542181015015, 129.08284950256348, 130.09099626541138, 131.08391094207764, 132.08850479125977, 133.07919454574585, 134.08412289619446, 135.08849716186523, 136.08089113235474, 137.08745741844177, 138.0853590965271, 139.08726286888123, 140.07226490974426, 141.0759060382843, 142.09497022628784, 143.08965373039246, 144.07982301712036, 145.0747630596161, 146.08786344528198, 147.07959175109863, 148.082679271698, 149.07742023468018, 150.08791756629944, 151.07320618629456, 152.08439588546753, 153.0842523574829, 154.0946066379547, 155.08540606498718, 156.08803129196167, 157.08355236053467, 158.07414197921753, 159.07692313194275, 160.0938594341278, 161.08827185630798, 162.08431005477905, 163.0757486820221, 164.0939564704895, 165.08190751075745, 166.08026123046875, 167.09428668022156, 168.08069920539856, 169.08168768882751, 170.07622456550598, 171.0875871181488, 172.09537863731384, 173.08238887786865, 174.08716750144958, 175.08635354042053, 176.08034420013428, 177.07337164878845, 178.07817578315735, 179.08698081970215, 180.08037185668945, 181.08906722068787, 182.0807020664215, 183.08364129066467, 184.08366799354553, 185.09130215644836, 186.0917956829071, 187.07586646080017, 188.08907771110535, 189.08888936042786, 190.09332609176636, 191.09071946144104, 192.080815076828, 193.08379745483398, 194.10122323036194, 195.0774281024933, 196.08323550224304, 197.07835006713867, 198.08370351791382, 199.0791997909546, 200.0809097290039, 201.09301686286926, 202.0806863307953, 203.07870173454285, 204.0765345096588, 205.08227634429932, 206.07724833488464, 207.07881784439087, 208.08690285682678, 209.08565831184387, 210.08840131759644, 211.07332706451416, 212.08268928527832, 213.07628560066223, 214.0865502357483, 215.08062767982483, 216.08452892303467, 217.08399510383606, 218.07320499420166, 219.07782578468323, 220.07846069335938, 221.087886095047, 222.08519864082336, 223.0766851902008, 224.0833616256714, 225.08442544937134, 226.08586287498474, 227.0849769115448, 228.08788990974426, 229.09310865402222, 230.09004497528076, 231.09369683265686, 232.09380555152893, 233.08291792869568, 234.08479118347168, 235.09010863304138, 236.08559036254883, 237.07797527313232, 238.0792932510376, 239.08439588546753, 240.08987736701965, 241.07975053787231, 242.09326767921448, 243.0765597820282, 244.07466959953308, 245.0778796672821, 246.09141063690186, 247.07385540008545, 248.07462286949158, 249.08372926712036, 250.07540798187256, 251.08193922042847, 252.09277200698853, 253.08141112327576, 254.07950973510742, 255.0836946964264, 256.0874273777008, 257.07727575302124, 258.0848226547241, 259.0763146877289, 260.08109617233276, 261.0861065387726, 262.0885455608368, 263.077716588974, 264.0857310295105, 265.0889699459076, 266.0854513645172, 267.0844144821167, 268.0832555294037, 269.0742013454437, 270.0770597457886, 271.08120012283325, 272.07307624816895, 273.07375931739807, 274.0877015590668, 275.0846679210663, 276.08391404151917, 277.0857717990875, 278.0868227481842, 279.08693075180054, 280.08138966560364, 281.0843892097473, 282.0803918838501, 283.0782780647278, 284.08898401260376, 285.08096647262573, 286.0763638019562, 287.0753102302551, 288.0770742893219, 289.0769855976105, 290.08856534957886, 291.08493185043335, 292.07324719429016, 293.0905342102051, 294.0781533718109, 295.0972180366516, 296.07861399650574, 297.0811460018158, 298.0939884185791, 299.0890724658966, 300.0753552913666, 301.0858631134033]

def formDataFrame(filename):

    data = pd.read_csv(filename)

    df = pd.DataFrame(data)

     # Convert the timestamps from microseconds to milliseconds (1 ms = 1000 µs)
    df['timestamp'] = df['Start Time (microseconds)'] // 1

    df['Latency (microseconds)'] = df['Latency (microseconds)'] / 1000

    # Calculate the offset from the first timestamp (in milliseconds)
    df['timestamp'] = df['timestamp'] - df['timestamp'].iloc[0]

    df_agg = df.groupby('timestamp', as_index=False)['Latency (microseconds)'].mean()

    df_agg = df_agg[df_agg['timestamp'] > 20] 

    return df_agg


bench = "YCSB"
subject = "Latency"
key = 'Latency (microseconds)'
#key = '99th Percentile Latency (millisecond)'

df_off = formDataFrame("plan_results/ycsb_no_psp_300.csv")
df_on = formDataFrame("results/ycsb_2025-03-20_09-01-47.raw.csv")
df_on2 = formDataFrame("results/ycsb_2025-03-20_08-54-26.raw.csv")

keyword_off = "barebones"
keyword_on = "pg_stat_statements"
keyword_on2 = "pg_stat_statements (max=50)"

#df_on = formDataFrame("tpch_on_1_exporter.csv")
#df_off = formDataFrame("tpch_off_1_raw.csv")

print(df_on[key])


fig, ax1 = plt.subplots(figsize=(16, 9))

# Plot latency time series
plt.plot(df_on2['timestamp'], df_on2[key], linewidth=2, label=f"{subject} ({keyword_on2})", color='red')

plt.plot(df_on['timestamp'], df_on[key], linestyle=':', linewidth=2, label=f"{subject} ({keyword_on})", color='orange')

plt.plot(df_off['timestamp'], df_off[key], linestyle=':', linewidth=2, label=f"{subject} ({keyword_off})", color='blue')


#ymin, ymax = plt.ylim()
#plt.vlines(x=scrape_seconds, color='r', ymin=ymin, ymax=ymax, linewidth=0.4, linestyle='dashed', label="Scrape")
#plt.vlines(x=eval_seconds, color='g', ymin=ymin, ymax=ymax, linestyle='dashed', label="Evaluation")

plt.xlabel('Time (s)', fontsize=18, labelpad=20)  
plt.ylabel('Latency (ms)', fontsize=18)


data = [
    [f"{keyword_on2}", f"{df_on2[key].mean():.2f}", f"{df_on2[key].quantile(0.95):.2f}", f"{df_on2[key].quantile(0.99):.2f}"],
    [f"{keyword_on}", f"{df_on[key].mean():.2f}", f"{df_on[key].quantile(0.95):.2f}", f"{df_on[key].quantile(0.99):.2f}"],
    [f"{keyword_off}", f"{df_off[key].mean():.2f}", f"{df_off[key].quantile(0.95):.2f}", f"{df_off[key].quantile(0.99):.2f}"],
]

# Column labels
columns = ['Measure', 'Mean (ms)', '95th Percentile (ms)', '99th Percentile (ms)']
plt.subplots_adjust(bottom=0.3)  # Increase bottom margin

plt.xticks(fontsize=16)
plt.yticks(fontsize=16)

plt.title(f"{subject} - {bench} Benchmark", fontsize=22)

ax1.grid()
plt.legend(fontsize=18)

table_ax = fig.add_axes([0.1, 0.15, 0.8, 0.2])  # Adjust y-position (0.1) and height (0.2)
table_ax.axis('off')  # Turn off the axes for the table

table = table_ax.table(cellText=data, colLabels=columns)

# Set the font size of the table and make the header bold
table.auto_set_font_size(False)
#table.set_fontsize(18)  # Increase the font size for the table

# Make the header bold
for (i, j), cell in table.get_celld().items():
    if j == 0:
        cell.set_width(0.4)  # Adjust the height of the rows
    if i == 0:  # Row 0 is the header row
        #cell.set_fontweight('bold')  # Set the header cells to bold
        cell.set_height(0.18)  # Adjust the height of the rows
        cell.set_text_props(weight='bold', fontsize=16)  # Bold and larger header font
    else:
        cell.set_height(0.15)  # Adjust the height of the rows
        cell.set_text_props(fontsize=16)  # Bold and larger header font

#fig.text(0.85, 0.02, f"[Average, 95th latency] with {keyword_off} : [{df_off[key].mean():.2f} ms, {df_off[key].quantile(0.95):.2f} ms]", ha='right', fontsize=20)
#fig.text(0.85, 0.07, f"[Average, 95th latency] with {keyword_on} : [{df_on[key].mean():.2f} ms, {df_on[key].quantile(0.95):.2f} ms]", ha='right', fontsize=20)
#fig.text(0.85, 0.12, f"[Average, 95th latency] with {keyword_on2} : [{df_on2[key].mean():.2f} ms, {df_on2[key].quantile(0.95):.2f} ms]", ha='right', fontsize=20)



# Show the plot
#ax1.legend()


plt.savefig(f"plan/{bench}{subject}_test.pdf", format="pdf")
#plt.show()